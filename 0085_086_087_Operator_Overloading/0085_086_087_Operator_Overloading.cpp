//**********************************************************************************************************
// Перегрузка оператора сложения. Перегрузка операторов пример.C++ Для начинающих. | Урок #85
// Перегрузка инкремента и декремента. Постфиксного и префиксного. ООП перегрузка операторов.| C++ #86
// Перегрузка оператора индексирования. Перегрузка операторов пример. C++ Для начинающих. | Урок #87
// ---------------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022 
// ---------------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
//**********************************************************************************************************
#include <iostream>
#include <string>
#include "utils.h"

using namespace std;

/*--------------------------------------------------
 *	 п е р е г р у з к а   о п е р а т о р о в
 *--------------------------------------------------*/

 /*--------------------------------
			CLASS POINT
 ---------------------------------*/
class Point {

	// --- С В О Й С Т В А ---
private:
	int x;
	int y;

public:

	// --- К О Н С Т Р У К Т О Р Ы ---

	Point() // Конcтруктор по умолчанию (инициализация данных)
	{
		x = 0;
		y = 0;
	}

	Point(int valueX, int valueY)
	{
		x = valueX;
		y = valueY;
		cout << this << " --- constructor \"Point\" ---" << endl;
	}


	// --- С Е Т Е Р Ы - Г Е Т Е Р Ы ---

	int GetX()						// GETTER !	для поля X 	
	{
		return x;					// вернуть значене "x"
	}

	void SetX(int valueX)			// SETTER ! параметер "valuaX" не должен быть "x" из области доступа private - для поля X 
	{
		x = valueX;					// уcтановить "x"
	}

	int GetY()						// GETTER !	для поля Y	
	{
		return y;
	}

	void SetY(int valueY)			// SETTER ! для поля Y
	{
		y = valueY;
	}

	// --- М Е Т О Д Ы ---

	void Print()					// публичный метод 	
	{
		cout << " X = " << x << "\t Y =  " << y << endl;
	}

	/********************************************************************
	   П е р е г р у з к а  о п е р а т о р о в  ("==", "!=", ">" etc.)
	*********************************************************************/
	/*--------------------------------
	   перегрузка для оператора "=="
	----------------------------------*/
	bool operator ==(const Point& other)
	{
		return this->x == other.x && this->y == other.y;
	}

	/*--------------------------------
	   перегрузка для оператора "!="
	----------------------------------*/
	bool operator !=(const Point& other)
	{
		return !(this->x == other.x && this->y == other.y);
	}

	/*--------------------------------
	   перегрузка для оператора "+"
	----------------------------------*/
	Point operator +(const Point& other)
	{
		Point temp;
		temp.x = this->x + other.x;
		temp.y = this->y + other.x;
		return temp;
	}

	// ==== ПЕРЕГРУЗКА ИНКРЕМЕНТА ===
	/*--------------------------------------------
	   перегрузка (постфикс) для оператора "++"
	---------------------------------------------*/
	Point& operator ++()	// для префиксной формы инкримента 
	{
		this->x++;
		this->y++;

		return *this;
	}

	/*--------------------------------------------
	   перегрузка (префикс) для оператора "++"
	--------------------------------------------*/
	Point& operator ++(int value)
	{
		Point temp(*this);

		this->x++;
		this->y++;

		return temp;
	}

	// ==== ПЕРЕГРУЗКА ДЕКРЕМЕНТА ===
	/*---------------------------------------------
	   перегрузка (постфикс) для оператора "--"
	----------------------------------------------*/
	Point& operator --()
	{
		this->x--;
		this->y--;

		return *this;
	}

	/*------------------------------------------
	   перегрузка (префикс) для оператора "--"
	-------------------------------------------*/
	Point& operator --(int value)
	{
		Point temp(*this);

		this->x--;
		this->y--;

		return temp;				// вернуть объект
	}

};


/*---------------------------------------------
  --- Перегрузка оператора индексирования ---
----------------------------------------------*/
class TestClass
{
public:

	int& operator [] (int index)
	{
		return arr[index];
	}

private:
	int arr[5]{ 5, 44, 4, 987, 69 };	// статический тестовый массив

};


/***********************
		  MAIN
************************/
int main(int argc, char* argv[])
{

	setlocale(LC_ALL, "ru");
	cout << "____________________________________________________________\n" << endl;

	// Перегрузка оператора сложения 
	Point a(5, 1);
	Point b(77, 12);

	Point c = a + b;	//Point c = a.operator+(b); // altenative sintax
	c.Print();

	cout << "____________________________________________________________\n" << endl;

	// Перегрузка инкремента и декремента 

	Point x(1, 1);
	++x;				// префиксная форма (++a)
	Point y = x;
	y.Print();

	x++;				// постфиксная форма (a++)
	Point z = x;
	z.Print();

	cout << "____________________________________________________________\n" << endl;

	// Перегрузка оператора индексирования
	TestClass ar;
	cout << ar[0] << endl;
	ar[0] = 100;
	cout << ar[0] << endl;

	cout << "____________________________________________________________\n" << endl;


	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;					// Деструктор запукается, когда поиcходит выход из области видимости функции 

}