// ****************************************************************************************************
// С++ множественное наследование одинаковые методы. ООП. | Изучение С++ для начинающих. | Урок #112  
// ----------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022
// ----------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
// ****************************************************************************************************

#include <iostream>
#include <string>
#include "utils.h"

using namespace std;

/*-------------------------------------------------
 *  множественное наследование одинаковые методы
 *------------------------------------------------*/

class Car										// "авто"
{
public:
	string str1 = "Поле класса машина";

	Car()
	{
		//cout << " Вызван Constructor класса \"Car\"" << endl;
	}

	~Car()
	{
		//cout << " Вызван Destructor класса \"Car\"" << endl;
	}

	//void Drive()
	void Use()									// Метод "USE"
	{
		cout << " Я еду! " << endl;
	}
};


class Airplain									// "аэроплан"									
{
public:
	string str2 = "Поле класса самолёт";

	Airplain()
	{
		//cout << " Вызван Constructor класса \"Airplain\"" << endl;
	}

	~Airplain()
	{
		//cout << " Вызван Destructor класса \"Airplain\"" << endl;
	}

	//	void Fly()
	void Use()									// Метод "USE"		
	{
		cout << " Я лечу! " << endl;
	}

};


class FlyingCar : public Car, public Airplain	// "аэробоиль" - множественное наследование (общий наследник)
{
public:
	FlyingCar()
	{
		//cout << " Вызван Constructor класса \"FlyingCar\"" << endl;
	}

	~FlyingCar()
	{
		//cout << " Вызван Destructor класса \"FlyingCar\"" << endl;
	}

};


/***********************
		  MAIN
************************/
int main(int argc, char* argv[])
{
	setlocale(LC_ALL, "ru");

	cout << "\n____________________________________________________________\n" << endl;

	FlyingCar fc;

	// П Р И В Е Д Е Н И Е  Т И П О В
	((Car)fc).Use();		// приведение объекта к типу Car (влучее одноименных методов при множественном наследовании)
	// вызов метода "Use" от предка "Car"

	((Airplain)fc).Use();	// вызов метода "Use" от предка "Airplain"
	cout << endl;

	// П Р О С Т Р А Н С Т В О  И М Е Н 
	fc.Car::Use();			// пространство имен для устранения неоднозначности!!! 
	fc.Airplain::Use();
	cout << "\n____________________________________________________________\n" << endl;

	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;

}