// *******************************************************************************************************************
// Чисто виртуальный деструктор c++. Наследование. Полиморфизм. virtual. override. | Для начинающих | Уроки C++ #106  
// -------------------------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022 
// -------------------------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
// *******************************************************************************************************************

#include <iostream>
#include <string>
#include "utils.h"

using namespace std;

/*---------------------------------
 * Чисто виртуальный деструктор
 *--------------------------------*/

class A
{
public:
	A()
	{
		cout << " => выделена динамическая память, объект класса A " << endl;
	}

	virtual ~A()	// виртуальный десктруктор
	{
		cout << " <= освобождена динамическая память, объект класса A " << endl;
	}
};


class B : public A	// наследник клaсcа A
{
public:
	B()
	{
		cout << " => выделена динамическая память, объект класса B " << endl;
	}

	~B() override	// переопределить виртуальный деструктор
	{
		cout << " <= освобождена динамическая память, объект класса B " << endl;
	}

};


/***********************
		  MAIN
************************/
int main(int argc, char* argv[])
{
	setlocale(LC_ALL, "ru");

	cout << "\n____________________________________________________________\n" << endl;

	//B b;

	// B *bptr = new B;	// стандартное выделение дин памяти
	A* bptr = new B;	// выделенме динамической памяти c виртуальным деструктором  

	delete bptr;		// освободить дин. память 

	cout << "\n____________________________________________________________\n" << endl;

	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;

}