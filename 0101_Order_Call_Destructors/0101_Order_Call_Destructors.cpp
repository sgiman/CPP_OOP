// *************************************************************************************************
// Порядок вызова деструкторов при наследовании. Деструкторы. | ООП C++ Для начинающих.| Урок #101  
// -------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022
// -------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
// *************************************************************************************************

#include <iostream>
#include <string>
#include "utils.h"

using namespace std;

/*------------------------------------------------------------------
*	Порядок вызова деструкторов при наследовании
*	Деcтрукторы вызываются в обратном порядке, чем конструкторы
*------------------------------------------------------------------*/

class A
{
public:
	A()
	{
		cout << " Вызвался конструктор класса A" << endl;
	}

	~A()
	{
		cout << "\n *** Вызвался деструктор класса A ***\n" << endl;
	}
};


class B : public A
{
public:
	B()
	{
		cout << " Вызвался конструктор класса B" << endl;
	}

	~B()
	{
		cout << "\n *** Вызвался деструктор класса B ***\n" << endl;
	}

};


class C : public B
{
public:
	C()
	{
		cout << " Вызвался конструктор класса C" << endl;
	}

	~C()
	{
		cout << "\n *** Вызвался деструктор класса C ***\n" << endl;
	}

};


/***********************
		  MAIN
************************/
int main(int argc, char* argv[])
{

	setlocale(LC_ALL, "ru");

	cout << "\n____________________________________________________________\n" << endl;

	C value;

	cout << "\n____________________________________________________________\n" << endl;

	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;

}