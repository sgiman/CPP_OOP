//*****************************************************************************************************************
// Деструктор что это. Зачем нужен деструктор класса в ООП. Деструктор с параметрами. Перегрузка.| Уроки C++ #80  
// ----------------------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022 
// ----------------------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2023 @ sgiman
//*****************************************************************************************************************
#include <iostream>
#include <string>
#include "utils.h"

using namespace std;

/*----------------
*	деструктор
*----------------*/

class MyClass
{
private:
	int* data;								// указатель на дин. массив

public:

	// Constructor
	MyClass(int size)
	{
		data = new int[size];				// динамический массив

		for (int i = 0; i < size; i++)		// заполнить дин. массив
		{
			this->data[i] = i;
		}
		cout << " Объект: " << this->data << "\n Вызвался конструктор\n" << endl;
		for (int i = 0; i < size; i++)		// вывести дин. массив
		{
			cout << this->data[i] << " ";
		}
		cout << endl;
	}

	// Destructor (не может принимать параметры и вызываться отдельно)
	~MyClass()
	{
		delete[] this->data; // освободить память от дин. массива
		cout << " Объект: " << this->data << "\n Вызвался деструктор" << endl;
	}

};

void Foo()
{
	cout << "\n --- НАЧАЛО ВЫПОЛНЕНИЯ --- \n" << endl;
	MyClass a(10); // для size = 10
	cout << "\n --- КОНЕЦ ВЫПОЛНЕНИЯ --- \n" << endl;
}


/***********************
	  === MAIN ===
************************/
int main(int argc, char* argv[])
{
	setlocale(LC_ALL, "ru");

	cout << "\n____________________________________________________________\n" << endl;

	//MyClass a(1);				// Созданме объекта соотв. класса 
	//MyClass b(2);
	//MyClass c(3);

	Foo();	// test

	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;
}