//*********************************************************************************************************
// Модификаторы доступа классов. public private protected что это. Спецификаторы доступа. | Уроки C++ #75  
// --------------------------------------------------------------------------------------------------------
// С++ | Visual Studio 2022 
// --------------------------------------------------------------------------------------------------------
// Журавлёв Сергей | #SimpleCode | Udemy
// https://www.udemy.com/user/zhuravliov-sergei/
// 2019-2022 @ sgiman
//*********************************************************************************************************

#include <iostream>
#include <clocale>
#include "utils.h"

using namespace std;

/*---------------------------
*	Модификаторы доступа
*---------------------------*/

class Point {

	//.................................... 
	//	Обасть доступа для "всех" и везде
	//.................................... 
public:
	int x;
	void Print()	// видны все поля 
	{
		cout << " Y = " << y << "\n X = " << x << "\n Z = " << z << endl;
		PrintY();	// вызов метода из области доступа privаte
	}

	//.......................................................................................................... 
	// Область доступа только для данного класса и дружественных (friend) функций и классов (по-умолчанию !!!)
	//.......................................................................................................... 
private:
	int z = 7;
	void PrintY()	// в функции (методе) видны все поля класса
	{
		cout << " Private-Protected PrintY(): " << y << endl;  //  y=5 из области для наследников из protected  
	}

	//............................................ 
	// Область доступа только при "наследовании"
	//............................................ 
protected:
	int y = 5;

};


/***********************
		  MAIN
************************/
int main(int argc, char* argv[])
{
	setlocale(LC_ALL, "ru");

	cout << "\n____________________________________________________________\n" << endl;

	Point a;
	a.x = 2;
	a.Print();

	//=== END ===
	cout << endl;
	MyDate();
	system("pause");
	return 0;
}
